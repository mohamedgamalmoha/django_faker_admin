from django.urls import path

from django_faker_admin.conf import settings
from django_faker_admin.views import FakerAdminView


class FakerModelAdminMixin:
    """
    A mixin for Django ModelAdmin classes to add functionality for generating dummy data.

    This mixin provides a custom view for populating dummy data in the admin interface. It allows
    administrators to easily create dummy instances of a model using a specified factory class.
    """
    #: The factory class used to generate dummy model instances.
    factory_class = None
    #: The template used for the change list view in the admin interface.
    change_list_template = settings.FAKER_ADMIN_CHANGE_LIST_TEMPLATE

    def get_urls(self):
        """
        Extends the ModelAdmin's URLs to include a custom path for the dummy data population view.

        This method adds a new URL pattern that points to the `populate_dummy_data_view` method. It ensures that
        the custom view integrates seamlessly with the existing admin URLs.

        Returns:
            - list: A list of URL patterns, including the new pattern for dummy data population.
        """
        urls = super().get_urls()  # Retrieve the existing URLs from the superclass
        info = self.model._meta.app_label, self.model._meta.model_name  # Get the app label and model name
        # Add a new URL pattern for populating dummy data, at the beginning of the list
        return [
            path('populate-dummy-data/', self.faker_view, name='%s_%s_populate_dummy_data' % info),
            *urls  # Include the existing URLs
        ]

    def get_faker_view_class(self, request):
        """
        Returns the view class used for populating dummy data.
        This method can be overridden to provide a custom view class if needed.

        Args:
            - request: The HttpRequest object.

        Returns:
            - class: The view class to be used for dummy data population. By default, it returns the `FakerAdminView`.
        """
        return FakerAdminView

    def get_faker_view_kwargs(self, request):
        """
        Returns the keyword arguments to be passed to the view class.
        This method can be overridden to provide additional context or configuration for the view.

        Returns:
            - dict: A dictionary of keyword arguments to be passed to the view class.
        """
        return {
            'model_admin': self,
            'factory_class': self.factory_class,
            'exclude': self.get_exclude(request=request),
        }

    def faker_view(self, request, extra_context=None):
        """
        View function to render the populate dummy data form and handle form submissions.

        This method is invoked when the custom URL for populating dummy data is accessed. It renders a view that
        allows the user to specify the number of dummy instances to create. The view is generated using the
        `PopulateDummyDataAdminView` class.

        Args:
            - request: The HttpRequest object.
            - extra_context (dict, optional): Additional context data to pass to the template. Defaults to None.

        Returns:
            - HttpResponse: The response generated by the `PopulateDummyDataAdminView`.
        """
        # Merge the base admin context with any extra context provided
        context = {
            **self.admin_site.each_context(request),  # Base admin context
            **(extra_context or {}),  # Extra context, if any
            "opts": self.opts,
        }

        # Get the view class and its kwargs
        klass = self.get_faker_view_class(request=request)
        kwargs = self.get_faker_view_kwargs(request=request)

        return klass.as_view(
           **kwargs,
            extra_context=context  # Pass the combined context to the view
        )(request)  # Call the view with the request object
